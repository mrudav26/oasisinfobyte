# -*- coding: utf-8 -*-
"""TASK 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tvObRi0NL8IxusXomnxZw7BfJrgjGUg-

## **Task-1 : Iris Flowers Classification ML Project**

## **Name: Mrudav Pranav Patel**
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing Libraries
# %matplotlib inline
import numpy as np
import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt

# Load The Dataset And See The Columns & Related Metrics
cols=["Sepal Length","Sepal Width","Petal Length","Petal Width","Flower Name"]
dataset=pd.read_csv("iris.data",names=cols)
print("First 5 entries in the dataset:\n")
dataset.head()

print("\nMetrics observed from the dataset:\n")
dataset.describe()

# Visual Representation Of The Dataset
sb.pairplot(dataset,hue="Flower Name")

# Segregating The Independent & Dependent Variables
X=dataset.iloc[:,:-1].values
Y=dataset.iloc[:,-1].values
print(X)

# Split The Dataset Into Training Set & Test Set
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2)

print(X_train)

print(X_test)

print(Y_train)

print(Y_test)

# Training & Predicting The Dataset Using Logistic Regression
from sklearn.metrics import accuracy_score,plot_confusion_matrix
from sklearn.linear_model import LogisticRegression
logistic=LogisticRegression()
logistic.fit(X_train,Y_train)
predictLogistic=logistic.predict(X_test)
acc=accuracy_score(Y_test,predictLogistic)*100
print("Model Accuracy: ",acc,"%\n\n")
plot_confusion_matrix(logistic,X_test,Y_test)
plt.show()
print("\n\n")
for i in range(len(predictLogistic)):
  print(Y_test[i],"<->",predictLogistic[i])

# Training & Predicting The Dataset Using SVC
from sklearn.metrics import accuracy_score,plot_confusion_matrix
from sklearn.svm import SVC
svc=SVC()
svc.fit(X_train,Y_train)
predictSVM=svc.predict(X_test)
accuracy=accuracy_score(Y_test,predictSVM)*100
print("Model Accuracy: ",accuracy,"%\n\n")
plot_confusion_matrix(svc,X_test,Y_test)  
plt.show()
print("\n\n")
for i in range(len(predictSVM)):
  print(Y_test[i],"<->",predictSVM[i])